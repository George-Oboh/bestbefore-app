{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Project Repository",
        "description": "Set up the initial project repository for BestBefore using React Native (Expo) with TypeScript.",
        "details": "Create a new Expo project using TypeScript template. Initialize a Git repository and set up version control with GitHub. Ensure the project structure aligns with React Native best practices.",
        "testStrategy": "Verify that the project builds successfully and runs on both iOS and Android simulators.",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Expo Project with TypeScript Template",
            "description": "Generate a new Expo project using the official TypeScript template.",
            "dependencies": [],
            "details": "1. Ensure Expo CLI is installed (`npm install -g expo-cli`).\n2. Run `expo init YourProjectName --template expo-template-blank-typescript`.\n3. Choose a blank TypeScript template when prompted.\n4. Navigate into the project directory: `cd YourProjectName`.",
            "status": "done"
          },
          {
            "id": 2,
            "title": "Set Up Basic Folder Structure",
            "description": "Organize the project directory by creating core folders for source code and assets.",
            "dependencies": [
              1
            ],
            "details": "1. Inside the project root, create a `src` directory.\n2. Within `src`, add subfolders: `components`, `screens`, and `utils`.\n3. At the root level, create an `assets` folder for images and fonts.\n4. Verify the folder hierarchy matches project conventions.",
            "status": "done"
          },
          {
            "id": 3,
            "title": "Initialize Local Git Repository",
            "description": "Configure Git for the project and make the initial commit.",
            "dependencies": [
              2
            ],
            "details": "1. Run `git init` in the project root directory.\n2. Create a `.gitignore` file and add common Node/Expo ignores (e.g., `node_modules/`, `dist/`, `*.expo.*`).\n3. Stage all files with `git add .`.\n4. Commit the initial state: `git commit -m \"chore: initial project setup\"`.",
            "status": "done"
          },
          {
            "id": 4,
            "title": "Configure GitHub Remote",
            "description": "Create a GitHub repository and link it as a remote to the local repository.",
            "dependencies": [
              3
            ],
            "details": "1. On GitHub, create a new repository named `YourProjectName` (without README or license).\n2. Copy the remote URL (SSH or HTTPS).\n3. Run `git remote add origin <remote-URL>` in the project root.\n4. Push the code to GitHub: `git branch -M main && git push -u origin main`.",
            "status": "done"
          }
        ]
      },
      {
        "id": 2,
        "title": "Configure Theme and Safe Area",
        "description": "Initialize theme and safe area configuration for consistent UI across devices.",
        "details": "Implement a theme provider using React Context to manage global styles. Use the SafeAreaView component from React Native to handle device-specific safe areas.",
        "testStrategy": "Check that the theme is applied consistently across all screens and that content is not obscured by device notches or status bars.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Theme Variables",
            "description": "Establish a set of theme variables (colors, fonts, spacing, etc.) to be used throughout the application.",
            "dependencies": [],
            "details": "• Identify primary, secondary, and accent colors\n• Define typography scales and font families\n• Set spacing units and border radius values\n• Store variables in a centralized theme object (e.g., theme.js)",
            "status": "done"
          },
          {
            "id": 2,
            "title": "Implement ThemeProvider with React Context",
            "description": "Create a ThemeProvider component that uses React Context to supply theme variables to the component tree.",
            "dependencies": [
              1
            ],
            "details": "• Create a ThemeContext and default theme value\n• Build a ThemeProvider component that wraps children\n• Ensure theme object is passed via Context.Provider\n• Update root of app (e.g., App.js) to include ThemeProvider",
            "status": "done"
          },
          {
            "id": 3,
            "title": "Integrate SafeAreaView and Test Across Devices",
            "description": "Wrap application layout with SafeAreaView and verify layout and theming across various device form factors.",
            "dependencies": [
              2
            ],
            "details": "• Import and wrap root view components with SafeAreaView from 'react-native-safe-area-context'\n• Apply theme-based background or styling to SafeAreaView\n• Run manual tests on multiple simulators (iOS and Android) with different screen sizes and notch configurations\n• Log and fix any styling or layout issues",
            "status": "done"
          }
        ]
      },
      {
        "id": 3,
        "title": "Setup React Navigation",
        "description": "Implement React Navigation with a bottom tab layout for the app.",
        "details": "Install React Navigation and its dependencies. Configure a bottom tab navigator with placeholder screens for Home, Products, and Settings.",
        "testStrategy": "Navigate between tabs and ensure that each tab displays the correct screen without errors.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Global UI Primitives",
        "description": "Create reusable UI components such as Button and Tag for consistent design.",
        "details": "Develop reusable components with customizable props for styling and behavior. Ensure components adhere to the app's design guidelines.",
        "testStrategy": "Use components in a sample screen and verify their appearance and functionality match design specifications.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Set Up Supabase Client",
        "description": "Configure the Supabase client and environment variables for backend interaction.",
        "details": "Install the Supabase client library. Set up environment variables for Supabase URL and API key. Initialize the client in a dedicated module.",
        "testStrategy": "Test connectivity to Supabase by fetching a test table or data.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Create AuthContext and Hook",
        "description": "Develop an authentication context and hook for managing user sessions.",
        "details": "Use React Context to create an AuthContext. Implement a custom hook to provide authentication state and actions (login, logout, signup).",
        "testStrategy": "Simulate login and logout actions and verify that authentication state updates correctly.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Login and Signup Screens",
        "description": "Develop the user interface for login and signup functionality.",
        "details": "Create screens for user login and signup using the AuthContext. Include form validation and error handling.",
        "testStrategy": "Test form submission with valid and invalid data to ensure proper validation and error messages.",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Add Route Protection Logic",
        "description": "Implement logic to protect routes based on authentication state.",
        "details": "Use React Navigation's navigation guards to restrict access to certain routes based on user authentication status.",
        "testStrategy": "Attempt to access protected routes without authentication and verify redirection to the login screen.",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Setup Local SQLite/MMKV Store",
        "description": "Configure local storage using SQLite/MMKV for offline product management.",
        "details": "Integrate SQLite/MMKV for local data storage. Define schemas for storing product information offline.",
        "testStrategy": "Add, retrieve, and delete sample data to ensure local storage operations work correctly.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Sync Logic to Supabase",
        "description": "Develop synchronization logic to sync local data with Supabase when online.",
        "details": "Create functions to detect online status and sync local changes to Supabase. Handle conflict resolution and data merging.",
        "testStrategy": "Simulate offline data changes and verify that they sync correctly when the device reconnects to the internet.",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Create Supabase Schema and RLS Policies",
        "description": "Define database schema and Row Level Security (RLS) policies in Supabase.",
        "details": "Design tables for products, users, and categories. Implement RLS policies to ensure data privacy and security.",
        "testStrategy": "Perform CRUD operations on the database and verify that RLS policies enforce access control as expected.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Build Add Product Screen",
        "description": "Develop the user interface for adding products manually.",
        "details": "Create a form for entering product details such as name, expiry date, barcode, and category. Implement form validation.",
        "testStrategy": "Test adding products with valid and invalid data to ensure correct validation and data storage.",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Create Product Detail and Edit Functionality",
        "description": "Implement functionality to view and edit product details.",
        "details": "Develop screens to display product details and allow editing. Ensure changes are saved locally and synced with Supabase.",
        "testStrategy": "Edit product details and verify that changes are reflected both locally and in Supabase.",
        "priority": "medium",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Display Product List on Home Screen",
        "description": "Show a list of products on the home screen with basic details.",
        "details": "Fetch products from local storage and display them in a list. Include basic details such as name and expiry date.",
        "testStrategy": "Verify that the product list displays correctly and updates when new products are added.",
        "priority": "medium",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implement Barcode Scanner Integration",
        "description": "Integrate barcode scanning functionality using the device camera.",
        "details": "Use a library like react-native-camera to implement barcode scanning. Handle permissions and fallback to manual entry if needed.",
        "testStrategy": "Test barcode scanning with various products and ensure accurate data retrieval or fallback to manual entry.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Connect to Open Food Facts API",
        "description": "Fetch product data from Open Food Facts using scanned barcodes.",
        "details": "Implement API calls to Open Food Facts to retrieve product information based on barcode data. Handle cases where data is not found.",
        "testStrategy": "Scan barcodes and verify that product data is fetched correctly from the API.",
        "priority": "medium",
        "dependencies": [
          15
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Add Category Dropdown to Add/Edit Forms",
        "description": "Include a dropdown for selecting product categories in forms.",
        "details": "Add a dropdown component to the add/edit product forms for category selection. Populate with predefined categories.",
        "testStrategy": "Ensure categories can be selected and saved correctly in product entries.",
        "priority": "medium",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Implement Filtering by Category, Status, and Name",
        "description": "Enable filtering of products by various criteria on the home screen.",
        "details": "Develop filtering logic to allow users to filter products by category, expiry status, and name. Update the product list based on selected filters.",
        "testStrategy": "Apply different filters and verify that the product list updates to reflect the selected criteria.",
        "priority": "medium",
        "dependencies": [
          14
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "Set Up Push Notifications via Expo",
        "description": "Configure push notifications to alert users of upcoming expirations.",
        "details": "Use Expo's Notifications API to set up push notifications. Schedule notifications for 3 and 1 days before product expiry.",
        "testStrategy": "Test notification scheduling and delivery to ensure users receive alerts at the correct times.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "Schedule Expiry Reminders Locally",
        "description": "Implement local scheduling of expiry reminders for offline functionality.",
        "details": "Use local device capabilities to schedule reminders even when offline. Sync with server when online to ensure consistency.",
        "testStrategy": "Verify that reminders are scheduled and delivered correctly without internet access.",
        "priority": "medium",
        "dependencies": [
          19
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Enforce Free Tier Product Limit",
        "description": "Restrict the number of products a user can add on the free plan.",
        "details": "Implement logic to check the number of products and enforce a limit of 25 for free users. Prompt users to upgrade if they exceed the limit.",
        "testStrategy": "Attempt to add more than 25 products and verify that the app prevents this and prompts for an upgrade.",
        "priority": "medium",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "Integrate Stripe Checkout for Upgrades",
        "description": "Implement payment processing for premium plan upgrades using Stripe.",
        "details": "Use Stripe's hosted checkout to handle payments. Implement client-side logic to initiate the checkout process.",
        "testStrategy": "Test the upgrade process by completing a transaction and verifying access to premium features.",
        "priority": "medium",
        "dependencies": [
          21
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Handle Webhook from Stripe",
        "description": "Process Stripe webhooks to update user subscription status server-side.",
        "details": "Set up a server-side endpoint to receive and process Stripe webhooks. Update user records based on subscription events.",
        "testStrategy": "Simulate webhook events and verify that user subscription status updates correctly in the database.",
        "priority": "medium",
        "dependencies": [
          22
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "Add Notification Toggle and Preferred Time",
        "description": "Allow users to configure notification settings and preferred reminder times.",
        "details": "Implement UI for users to toggle notifications on/off and select preferred times. Save preferences locally and sync with Supabase.",
        "testStrategy": "Change notification settings and verify that preferences are saved and applied to scheduled notifications.",
        "priority": "medium",
        "dependencies": [
          19
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "Implement Sign-Out and Delete Account",
        "description": "Provide functionality for users to sign out and delete their account.",
        "details": "Add options in the settings screen for users to sign out or delete their account. Ensure data is removed from local storage and Supabase.",
        "testStrategy": "Test sign-out and account deletion processes to ensure data is cleared and access is revoked.",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 26,
        "title": "Implement Error Boundaries and UI Feedback",
        "description": "Add error handling and user feedback mechanisms throughout the app.",
        "details": "Use React error boundaries to catch and display errors gracefully. Implement UI feedback for actions like loading and errors.",
        "testStrategy": "Induce errors and verify that they are caught and displayed to the user without crashing the app.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "Write Unit Tests for Store and Sync Logic",
        "description": "Develop unit tests to ensure the reliability of local storage and sync functionality.",
        "details": "Use a testing framework like Jest to write unit tests for functions handling local storage and synchronization with Supabase.",
        "testStrategy": "Run tests to verify that storage and sync operations behave as expected under various conditions.",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 28,
        "title": "Add E2E Tests for Barcode and Offline Flow",
        "description": "Create end-to-end tests for barcode scanning and offline functionality.",
        "details": "Use a tool like Detox to write E2E tests that simulate user interactions with barcode scanning and offline product management.",
        "testStrategy": "Execute E2E tests to ensure the app functions correctly in real-world scenarios, including offline use.",
        "priority": "medium",
        "dependencies": [
          15,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-20T20:01:00.316Z",
      "updated": "2025-06-20T20:10:51.034Z",
      "description": "Tasks for master context"
    }
  }
}