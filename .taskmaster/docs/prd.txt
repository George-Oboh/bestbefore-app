
# Product Requirements Document (PRD)

## Project Name
BestBefore

## Project Description
BestBefore is a cross-platform mobile app (iOS and Android) built with React Native (Expo) that helps users track expiration dates of food and household items. Users can scan barcodes, enter product details manually, and get timely notifications before items expire. The app works offline and syncs with Supabase once online. It emphasizes simplicity, reliability, and minimal friction, taking inspiration from the BEEP app.

---

## Target Audience
- Health-conscious consumers
- Busy households reducing waste
- Users with intermittent internet access
- People looking for simple inventory reminders

---

## Desired Features
### Product Management
- Add/Edit/Delete product entries
  - Manual entry for product name, expiry date, barcode, and category
  - Edit product name for custom entries
  - View detailed product info (based on Figma design)

### Barcode Scanning
- Scan UPC/EAN barcodes via camera
  - Fetch data from Open Food Facts and other sources
  - Use local product list as fallback
  - Allow manual input if camera is denied or product isn’t found

### Categorization
- Pre-defined categories (e.g., fridge, pantry, freezer)

### Notifications
- Push notifications before expiry
  - Sent at 12 PM and 8 PM daily
  - Notify 3 and 1 days before expiry
  - User-configurable reminder frequency

### Search & Filter
- Filter/search products by:
  - Name
  - Category
  - Expiry status (e.g., “Expiring Soon”, “Expired”)

### Offline & Sync
- Full offline capability
  - Add/view/edit/delete items without internet
  - Sync with Supabase when online

### User Accounts
- Authentication and user profile
  - Sign-up/login with email
  - Persist user data across devices

### Storage & Sync
- Supabase backend
  - Sync product list and preferences
  - Cloud backup and multi-device support

### MVP Limits & Monetization
- Free plan: up to 25 products
- Premium plan (post-MVP): $2.99/month for unlimited items and ad-free

---

## Technical Architecture
- Frontend: React Native (Expo) using TypeScript
- Backend: Supabase (Auth, Storage, RLS-enabled Postgres)
- Local DB: SQLite/MMKV for offline support
- Barcode Lookup API: Open Food Facts
- Notifications: Expo Notifications API
- Payments: Stripe (hosted checkout, webhook)

---

## Implementation Plan

## Foundation Setup
- Step 1: Initialize theme and safe area configuration
- Step 2: Setup React Navigation with bottom tab layout
- Step 3: Implement global UI primitives (Button, Tag, etc.)

## Authentication
- Step 4: Set up Supabase client and env config
- Step 5: Create AuthContext and hook
- Step 6: Implement login and signup screens
- Step 7: Add route protection logic

## Local Storage and Sync
- Step 8: Setup local SQLite/MMKV store for products
- Step 9: Implement sync logic to Supabase
- Step 10: Create Supabase schema and RLS policies

## Product Management
- Step 11: Build Add Product screen (manual entry)
- Step 12: Create product detail and edit functionality
- Step 13: Display product list on Home screen

## Barcode Scanning
- Step 14: Implement barcode scanner integration
- Step 15: Connect to Open Food Facts API

## Filters & Categorization
- Step 16: Add category dropdown to Add/Edit forms
- Step 17: Implement filtering by category, status, and name

## Notifications
- Step 18: Set up push notifications via Expo
- Step 19: Schedule expiry reminders locally

## Limits and Premium Tier
- Step 20: Enforce free tier product limit (25)
- Step 21: Integrate Stripe checkout for upgrades
- Step 22: Handle webhook from Stripe (server-side)

## Settings & Preferences
- Step 23: Add notification toggle and preferred time
- Step 24: Implement sign-out and delete account

## Error Handling and Testing
- Step 25: Implement error boundaries and UI feedback
- Step 26: Write unit tests for store and sync logic
- Step 27: Add E2E tests for barcode + offline flow

---

## Summary
This PRD outlines all core requirements, user needs, features, architecture, and an actionable, sequenced implementation plan for BestBefore. The approach ensures offline support, reliable notifications, user-specific sync via Supabase, and monetization readiness.
